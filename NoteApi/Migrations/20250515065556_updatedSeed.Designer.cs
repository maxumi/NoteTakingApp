// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteApi.Data;

#nullable disable

namespace NoteApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515065556_updatedSeed")]
    partial class updatedSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("NoteApi.Data.FileSystemEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("FileSystemEntry");

                    b.HasDiscriminator<string>("EntryType").HasValue("FileSystemEntry");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NoteApi.Data.Folder", b =>
                {
                    b.HasBaseType("NoteApi.Data.FileSystemEntry");

                    b.HasDiscriminator().HasValue("Folder");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Work",
                            Path = "Work"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Personal",
                            Path = "Personal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Projects",
                            Path = "Projects"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Archive",
                            Path = "Archive"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Subproject",
                            ParentId = 3,
                            Path = "Projects/Subproject"
                        });
                });

            modelBuilder.Entity("NoteApi.Data.Note", b =>
                {
                    b.HasBaseType("NoteApi.Data.FileSystemEntry");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Note");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Name = "Meeting Agenda",
                            ParentId = 1,
                            Path = "Work/Meeting Agenda",
                            Content = "Discuss project roadmap and next steps.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "[\"meeting\",\"agenda\"]",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            Name = "Grocery List",
                            ParentId = 2,
                            Path = "Personal/Grocery List",
                            Content = "- Milk\n- Bread\n- Eggs",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "[\"shopping\",\"personal\"]",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            Name = "Project Plan",
                            ParentId = 5,
                            Path = "Projects/Subproject/Project Plan",
                            Content = "Milestone 1: Research\nMilestone 2: Prototype",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "[\"project\",\"plan\"]",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            Name = "Old Notes",
                            ParentId = 4,
                            Path = "Archive/Old Notes",
                            Content = "Legacy project notes.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "[]",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("NoteApi.Data.FileSystemEntry", b =>
                {
                    b.HasOne("NoteApi.Data.Folder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("NoteApi.Data.Folder", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
